الخطة 75: دعم مستودعات Git وGitHub بعمق داخل بيئة العمل (Advanced Git/GitHub Integration)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
دمج مستودعات Git وGitHub (أو GitLab وBitbucket لاحقًا) بشكل كامل داخل التطبيق، مع واجهة رسومية متقدمة لإدارة جميع العمليات بدون مغادرة المشروع.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. عرض حالة الملفات (معدلة، جديدة، محذوفة).
2. واجهة رسومية للـ Commit و Push و Pull و Merge.
3. إدارة الفروع (Branches) بصريًا.
4. عرض تاريخ التعديلات Log و Blame.
5. مقارنة النسخ والملفات Side-by-Side.
6. دعم GitHub API لجلب المستودعات والمساهمة فيها.
7. إدارة الـ Issues والـ Pull Requests من داخل التطبيق.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. لوحة التحكم:
   - تعرض:
     - الملفات المعدلة
     - المسارات التي لم تُضف بعد
     - حالة المستودع الحالي

2. العمليات:
   - زر [✔️ Commit] مع واجهة لإدخال الرسالة
   - [⬆️ Push] إلى الفرع الرئيسي أو المخصص
   - [⬇️ Pull] من GitHub أو GitLab
   - [⚖️ Merge] بين الفرعين مع مقارنة مرئية

3. عرض التاريخ:
   - جدول بكل Commit:
     - من – تاريخ – الملفات المتأثرة
   - واجهة Blame:
     - لكل سطر: من كتبه ومتى

4. الفروع:
   - واجهة رسم شجري للفروع
   - يمكن إنشاء – حذف – دمج – التبديل بينها

5. المقارنة:
   - عرض ملفين بجانب بعض Side-by-Side
   - تلوين الفرق – التنقل بين الأسطر المختلفة

6. GitHub API:
   - تسجيل الدخول عبر OAuth
   - جلب المستودعات الخاصة بالمستخدم
   - استعراض Pull Requests
   - إنشاء أو تعليق على Issue

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم استكمال خطة 75 وسأنتقل إلى خطة 76.