الخطة 188: إنشاء وحدة اختبار المشاريع (Project Test Runner)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
توفير وحدة متكاملة تسمح للمستخدم بإجراء اختبارات على مشاريع البرمجة من داخل التطبيق، مع عرض النتائج والتقارير وتحليل الأخطاء بسهولة.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. دعم أطر اختبار متعددة (unittest, pytest, nose).
2. واجهة لعرض الاختبارات وتشغيلها.
3. تحليل النتائج وتمييز الناجح والفاشل.
4. عرض تتبع الخطأ (Traceback) عند الفشل.
5. دعم تشغيل اختبارات منفردة أو كاملة.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. اكتشاف ملفات الاختبار:
   - فحص مجلد المشروع للملفات المطابقة للنمط `test_*.py`.
   - استخدام `unittest.TestLoader` أو `pytest` لاكتشاف الدوال.

2. واجهة التشغيل:
   - عرض قائمة بجميع وحدات ودوال الاختبار.
   - أزرار لتشغيل اختبار معين أو جميع الاختبارات.

3. عرض النتائج:
   - جدول يوضح اسم الدالة، الحالة (✔️ ناجح / ❌ فشل)، الوقت المستغرق.
   - ترميز لوني لتمييز الحالات المختلفة.

4. تتبع الأخطاء:
   - عرض Stack Trace مفصل مع السطر الذي حدث به الخطأ.
   - زر نسخ أو حفظ الخطأ للرجوع إليه لاحقًا.

5. تكامل مع CI محلي:
   - توليد تقرير JUnit XML أو HTML.
   - زر “إعادة الاختبار الفاشل فقط”.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم توليد الخطة 188 بنجاح.
