الخطة 128: ميزة تتبع الأداء الزمني للبرمجيات أثناء التشغيل (Runtime Profiler)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
تحليل الأداء الزمني للملفات والدوال أثناء تشغيل المشروع داخل التطبيق، وتقديم تقرير مفصل حول وقت التنفيذ واستهلاك الموارد لكل جزء من الكود.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. أدوات قياس الأداء الزمني (Profiling).
2. ربط بمحرّك التشغيل المدمج في التطبيق.
3. تجميع الإحصاءات وعرضها برسوم بيانية.
4. مقارنة بين نسخ مختلفة من الكود.
5. دعم تقارير الأداء الزمنية لكل ملف/دالة.
6. دعم تحليل الأداء في الوقت الحقيقي.
7. حفظ سجل الأداء لكل تشغيل.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. أدوات القياس:
   - بايثون: استخدام `cProfile`, `timeit`, `tracemalloc`
   - NodeJS: `--inspect`, `performance.now()`
   - PHP: `xdebug`, `microtime()`

2. الواجهة:
   - جدول ملون يعرض:
     - [اسم الدالة] – [مدة التنفيذ] – [عدد مرات الاستدعاء] – [النسبة من وقت التشغيل الكامل]
   - رسوم بيانية دائرية أو عمودية

3. الملفات:
   - إنشاء `performance_log.jsonl` بعد كل تشغيل

4. تنبيهات الأداء:
   - إذا تجاوزت دالة وقت معين → عرض تحذير
   - اقتراح تحسين (كود بديل أو تقليل التكرار)

5. المقارنة:
   - مقارنة بين نسخة `v1` و `v2`
   - الفرق الزمني بين الدوال

6. التحكم:
   - [تشغيل المراقبة] – [إيقاف] – [عرض التقرير]

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم توليد الخطة 128 بنجاح.