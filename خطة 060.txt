الخطة 60: نظام الإضافات المجتمعية (Community Plugin System)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
إتاحة منصة داخل التطبيق تمكّن المطورين من إنشاء، مشاركة، وتثبيت إضافات (Plugins) مخصصة توسع وظائف التطبيق، وتشجع على بناء مجتمع مطورين نشط.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. واجهة إدارة الإضافات.
2. مستودع مركزي للإضافات.
3. تثبيت / إزالة الإضافات بزر واحد.
4. دعم تطوير الإضافات باستخدام Python أو JavaScript.
5. مستند API للمطورين.
6. مراجعة أمان الإضافات.
7. تقييمات وتعليقات من المستخدمين.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. واجهة الإضافات:
   - قسم "الإضافات المجتمعية" يحتوي على:
     - قائمة الإضافات المثبتة
     - استعراض المتجر
     - زر [تحديث الكل] – [إعادة تحميل]

2. تصميم الإضافة:
   - كل إضافة على شكل مجلد:
     ```
     /plugins/my_plugin/
       ├── manifest.json
       ├── main.py
       └── ui/
     ```
   - يحتوي `manifest.json` على:
     ```json
     {
       "name": "مُدقّق الأكواد",
       "version": "1.0",
       "author": "Ahmad",
       "entry": "main.py",
       "permissions": ["read_code", "modify_files"]
     }
     ```

3. التثبيت:
   - يتم تنزيل الإضافة من المستودع السحابي
   - يتحقق التطبيق من صلاحية التوقيع
   - يُفعّلها داخل جلسة التطبيق

4. دعم API داخلي:
   - توفير واجهات مثل:
     - `get_open_file()`
     - `replace_code(start_line, new_code)`
     - `create_sidebar_panel()`

5. المتجر:
   - متجر مركزي مدمج يعرض:
     - الفئة – الشعبية – التقييم – عدد التنزيلات
     - زر [تثبيت] [عرض الكود] [إبلاغ]

6. الأمان:
   - كل إضافة تعمل في sandbox
   - لا يمكنها الوصول للنظام مباشرة دون إذن المستخدم
   - تدقيق تلقائي للكود قبل التثبيت

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم استكمال خطة 60 وسأنتقل إلى تنفيذ خطة 61 فورًا.