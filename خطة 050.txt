الخطة 50: دعم استيراد مشاريع جاهزة وتحليلها (Import & Analyze External Projects)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
إضافة إمكانية استيراد مشاريع خارجية من الجهاز أو الإنترنت (مثل GitHub أو GitLab أو روابط ZIP)، مع تحليل بنيتها، تحديد نقطة البداية، واكتشاف المتطلبات والمكتبات تلقائيًا.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. زر استيراد مشروع من المسار المحلي أو رابط خارجي.
2. فك ضغط الملفات وفحص البنية تلقائيًا.
3. عرض شجرة المجلدات والملفات.
4. التعرف على الملف الأساسي للتشغيل.
5. استخراج المتطلبات (requirements.txt أو تحليل الكود).
6. إمكانية تجربة المشروع مباشرة من داخل التطبيق.
7. اقتراح تحسينات تلقائية للهيكلة أو الأداء أو الأمن.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. طرق الاستيراد:
   - [📁] من مجلد على الجهاز.
   - [🌐] من رابط GitHub أو GitLab.
   - [🗜] من ملف ZIP.
   - [🔒] من مشروع مشفر داخليًا بصيغة التطبيق.

2. تحليل البنية:
   - عند الاستيراد:
     - يتم فحص:
       - ملفات .py – .php – .html – .js
       - هل يحتوي على __main__؟
       - هل يحتوي على index.html؟
     - تحديد نقطة البدء:
       - مثل: app.py أو main.php أو index.html

3. عرض المشروع:
   - تظهر شجرة المشروع على الواجهة اليسرى.
   - عند النقر على أي ملف، يظهر الكود ملونًا في المحرر.

4. تحليل المكتبات:
   - إذا كان هناك requirements.txt:
     - يتم قراءته وعرضه
   - إذا لم يكن موجودًا:
     - يتم تحليل import في كل ملفات .py
     - اقتراح مكتبات ناقصة تلقائيًا

5. تجربة المشروع:
   - زر “تشغيل المشروع الآن”
   - يتم تثبيت المتطلبات وتشغيل الملف الرئيسي تلقائيًا
   - عرض مخرجات المشروع في نافذة مدمجة

6. تحسينات واقتراحات:
   - "يوجد ملفات غير مستخدمة"
   - "يفضل فصل منطق قواعد البيانات"
   - "مكتبة flask غير مستخدمة يمكن حذفها"

7. التخزين:
   - حفظ المشروع ضمن قائمة المستخدم وتفعيل النسخ الاحتياطي

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم الانتهاء من الخطة 50، وهي نقطة مهمة لدعم استيراد وتحليل المشاريع الخارجية بذكاء وفعالية.