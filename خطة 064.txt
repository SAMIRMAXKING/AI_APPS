الخطة 64: نظام مراقبة الأداء والموارد الحية (Live Performance & Resource Monitor)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
إتاحة مراقبة حية لأداء التطبيق قيد التطوير أو التشغيل، بما يشمل استهلاك المعالج والذاكرة، حجم الملفات المفتوحة، وعدد العمليات، مع تقديم تنبيهات وتحليل أداء لحظي.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. شريط معلومات حي يظهر الموارد المستخدمة.
2. رسم بياني لاستهلاك CPU / RAM / I/O.
3. عرض معلومات الشبكة (عند الحاجة).
4. تحليل تأثير كل ملف أو عملية داخل المشروع.
5. تنبيهات في حال تجاوز الحدود المحددة.
6. إمكانية تسجيل الجلسة وتحليلها لاحقًا.
7. دعم تخصيص الألوان والوحدات والحدود القصوى.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. الواجهة:
   - شريط سفلي في التطبيق يعرض:
     - 💾 RAM: 142MB
     - ⚙️ CPU: 7.8%
     - 📁 Open files: 12
     - ⏱️ Runtime: 00:02:14

2. الرسوم البيانية:
   - نافذة منفصلة تعرض:
     - خط زمني لاستهلاك الموارد
     - يمكن تكبير الفترة – تجميد العرض – تصدير الصورة

3. المصادر:
   - يتم استخدام مكتبات مثل:
     - psutil (Python)
     - أو System APIs (على Mac / Windows)
   - يتم تحديث القيم كل ثانية

4. تنبيهات:
   - إذا تجاوز RAM 1GB:
     - يظهر إشعار أحمر
     - "التطبيق يستهلك ذاكرة مرتفعة!"
   - يمكن تخصيص العتبات

5. التحليل:
   - لكل ملف أو دالة:
     - زمن التنفيذ – عدد مرات الاستدعاء – تأثير الأداء
   - تُعرض نتائج مثل:
     - "دالة validate() بطيئة جدًا – تستغرق 650ms"

6. تسجيل الجلسات:
   - المستخدم يمكنه النقر على “ابدأ مراقبة الجلسة”
   - عند الانتهاء: حفظ ملف `.perf.json`

7. تخصيص الإعدادات:
   - اختيار وحدة الزمن / الحجم
   - تشغيل/إيقاف الألوان الحية أو الأصوات

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم استكمال خطة 64 ويمكنني مباشرة الآن إلى خطة 65 إذا رغبت.