الخطة 103: دعم متابعة تغييرات الملفات الحية (Live File Watcher)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
مراقبة الملفات والمجلدات داخل المشروع في الوقت الحقيقي لرصد أي تعديل أو حذف أو إنشاء ملف جديد، وعرض الإشعارات للمستخدم مع خيارات التراجع الفوري أو الحفظ التلقائي للتغييرات.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. مراقبة مستمرة للمجلدات والمشاريع.
2. عرض إشعار لحظي عند أي تغيير.
3. سجل زمني بكل العمليات (تعديل – حذف – إنشاء).
4. دعم استعادة التعديلات فورًا.
5. تخصيص المجلدات الخاضعة للمتابعة.
6. واجهة رسومية لعرض التغييرات.
7. تكامل مع نظام النسخ الاحتياطي الذكي.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. مكتبة المتابعة:
   - Python:
     - `watchdog` أو `watchfiles`
   - NodeJS:
     - `chokidar`
   - يتم تشغيل ملاحظات على:
     - ملفات `.py`, `.html`, `.js`, `.css`, إلخ

2. سجل التغييرات:
   - `changes_log.jsonl` في مجلد المشروع
   - كل عملية تسجل:
     ```json
     {
       "timestamp": "2025-07-20 11:10",
       "action": "modified",
       "file": "main.py"
     }
     ```

3. الاستعادة:
   - لكل عملية تعديل يتم حفظ نسخة تلقائية:
     - `backup/main_v1.py`, `main_v2.py`, إلخ
   - يمكن الرجوع لأي إصدار سابق بضغطة زر

4. الإشعارات:
   - إشعار في الواجهة عند كل تغيير:
     - “تم تعديل الملف: settings.py”
     - زر [عرض التغيير] – [تراجع]

5. التكامل:
   - عند اكتشاف حذف ملف:
     - يسأل المستخدم: “هل ترغب في استرجاعه؟”
   - مزامنة مع النسخ الاحتياطية لتوثيق كل تغيير

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم الانتهاء من خطة 103 وسأتابع الآن تنفيذ خطة 104 مباشرة.