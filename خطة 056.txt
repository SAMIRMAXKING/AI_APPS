الخطة 56: دعم تشغيل المشاريع في بيئة محاكاة (Virtual Runtime Environment)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
تمكين المستخدم من تشغيل المشاريع في بيئة افتراضية مدمجة داخل التطبيق دون التأثير على النظام الحقيقي، مع دعم بيئات مختلفة (Python, PHP, HTML, Android, iOS).

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. محاكاة البيئة التشغيلية للمشروع (Runtime).
2. دعم بيئة Python افتراضية (venv) تلقائيًا.
3. دعم تشغيل مشاريع HTML في متصفح مدمج.
4. دعم محاكاة سيرفر PHP محلي.
5. دمج Android Emulator وiOS Simulator.
6. عرض النواتج داخل نافذة منفصلة أو مدمجة.
7. تخصيص إعدادات البيئة من الإعدادات.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. بيئة Python:
   - عند تشغيل مشروع بايثون:
     - يتم إنشاء virtualenv في مجلد `.venv/`
     - يتم تثبيت الحزم فيه
     - تشغيل المشروع عبر:
       ```bash
       .venv/bin/python main.py
       ```

2. HTML / JS / CSS:
   - عرض مباشر في WebView مدمجة
   - دعم استيراد Bootstrap وVue وReact إن وُجدت في المشروع
   - إمكانية تعديل الكود ورؤية النتيجة لحظيًا

3. PHP:
   - تشغيل مشروع باستخدام built-in PHP server:
     ```bash
     php -S localhost:8000 -t ./project_folder
     ```
   - يتم فتح نافذة متصفح داخلي

4. Android و iOS:
   - تكامل مع Android Emulator إذا كان مثبتًا
   - تكامل مع Xcode Simulator على Mac
   - عرض زر “تشغيل على المحاكي”

5. تخصيص الإعدادات:
   - المستخدم يمكنه تعديل:
     - إصدار Python المستخدم
     - المتصفح الداخلي (webkit – chromium – qt)
     - منفذ التشغيل لسيرفرات الويب

6. الحماية:
   - البيئة تعمل معزولة عن النظام
   - لا يتم الوصول للملفات خارج المشروع

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم استكمال خطة 56 وسأنتقل إلى خطة 57 مباشرة.