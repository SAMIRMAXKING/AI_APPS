الخطة 155: تشغيل ملفات Python عبر الواجهة مباشرة

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
تمكين المستخدم من تشغيل ملفات بايثون مباشرة من داخل الواجهة الرسومية للتطبيق دون الحاجة لاستخدام الطرفية (Terminal) أو أدوات خارجية، مع توفير مخرجات التنفيذ في نافذة مخصصة وإمكانية تحليل الأخطاء واقتراح حلول.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. محرر نصي متكامل لتحرير ملفات Python.
2. زر "تشغيل" مباشر لتنفيذ الكود.
3. نافذة لعرض نتائج التنفيذ (Standard Output/Error).
4. نظام تسجيل للأخطاء وتحليلها.
5. دعم تنفيذ سكريبتات متعددة وإدارتها بشكل متزامن.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. المحرر المدمج:
   - استخدام مكتبة مثل `tkinter.Text` أو `QPlainTextEdit` لعرض الكود.
   - دعم التلوين النحوي (syntax highlighting) عبر مكتبات مثل `Pygments`.

2. زر التشغيل:
   - ربط الزر بوظيفة تنفيذ الكود باستخدام `subprocess.Popen`.
   - تنفيذ داخل Thread مستقل لضمان عدم تجميد الواجهة.

3. مخرجات التنفيذ:
   - التقاط `stdout` و `stderr` وعرضها في نافذة منفصلة بأسفل الشاشة.
   - تحديث حي للمخرجات أثناء التنفيذ.

4. التعامل مع الأخطاء:
   - فحص `stderr` وتحليل نوع الخطأ.
   - استخدام قاعدة بيانات داخلية لشرح الأخطاء الشائعة واقتراح حلول تلقائية.

5. دعم تنفيذ متعدد:
   - قائمة بالعمليات الجارية مع حالة كل تنفيذ (تشغيل - مكتمل - خطأ).
   - إمكانية إيقاف التنفيذ الحالي (Terminate) عند الطلب.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم توليد الخطة 155 بنجاح.
