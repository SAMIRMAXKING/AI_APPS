الخطة 37: دعم تشغيل المشاريع في بيئة افتراضية معزولة (Virtual Environment Execution)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
توفير نظام تلقائي لإنشاء وتشغيل كل مشروع في بيئة افتراضية (Virtualenv أو venv)، لضمان عزل المتطلبات وعدم تضاربها مع مشاريع أخرى، مع إدارة البيئات بذكاء وسهولة من خلال الواجهة.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. إنشاء بيئة افتراضية لكل مشروع تلقائيًا.
2. تثبيت الحزم المطلوبة داخل البيئة.
3. تشغيل الملفات من خلال البيئة فقط.
4. أدوات إدارة البيئات (إنشاء – حذف – إعادة تثبيت).
5. دعم Pyenv لتعدد نسخ بايثون.
6. مراقبة حالة البيئة وإصلاح الأعطال.
7. دعم واجهة رسومية كاملة لإدارة البيئة.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. إنشاء البيئة:
   - عند فتح مشروع لأول مرة:
     ```bash
     python -m venv .venv
     ```
   - أو باستخدام virtualenv:
     ```bash
     virtualenv .venv
     ```

2. تثبيت المتطلبات:
   - يتم فحص ملف `requirements.txt`:
     ```bash
     .venv/bin/pip install -r requirements.txt
     ```
   - يتم إخطار المستخدم بحالة التثبيت.

3. التشغيل من البيئة:
   - يتم تفعيل البيئة قبل التشغيل:
     - Windows:
       ```bash
       .venv\Scripts\activate
       ```
     - Linux/macOS:
       ```bash
       source .venv/bin/activate
       ```
   - تشغيل الملف الرئيسي داخل السياق المعزول.

4. أدوات الإدارة:
   - من الواجهة:
     - [✔] حذف البيئة
     - [✔] إعادة تثبيت البيئة
     - [✔] تغيير نسخة بايثون
     - [✔] مشاهدة الحزم المثبتة

5. دعم Pyenv:
   - كشف جميع نسخ بايثون المثبتة.
   - السماح باختيار نسخة لكل مشروع.

6. إصلاح المشاكل:
   - إذا فشل التثبيت:
     - محاولة حذف البيئة وإعادة إنشائها تلقائيًا.
     - تقديم سجل بالأخطاء للمستخدم.

7. واجهة المستخدم:
   - تبويب “البيئة الافتراضية” يعرض:
     - اسم المشروع
     - حالة البيئة (✔ نشطة أو ❌ تالفة)
     - عدد الحزم
     - النسخة المستخدمة

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم الانتهاء من خطة 37 بنجاح، وسأتابع الآن تنفيذ خطة 38 المتعلقة بنظام النسخ الاحتياطي الذكي.