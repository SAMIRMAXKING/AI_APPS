الخطة 18: وحدة تحليل الأداء اللحظي للكود (Live Performance Profiler)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
مراقبة الأداء الحي للوظائف أثناء تنفيذ التطبيق داخل بيئة التطوير، مع إظهار الوظائف الأكثر استهلاكًا للوقت والذاكرة.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. محرك قياس وقت التنفيذ لكل وظيفة.
2. تحليل استهلاك الذاكرة (Memory Profiler).
3. رسم بياني حي للأداء.
4. تنبيهات حول النقاط الحرجة.
5. دعم تصدير تقارير الأداء.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. تتبع الوقت:
   - استخدام `@decorator` لحساب وقت كل وظيفة:
     ```python
     import time
     def profile(func):
         def wrapper(*args, **kwargs):
             start = time.perf_counter()
             result = func(*args, **kwargs)
             duration = time.perf_counter() - start
             log_duration(func.__name__, duration)
             return result
         return wrapper
     ```

2. تحليل الذاكرة:
   - استخدام `memory_profiler`:
     ```python
     from memory_profiler import profile
     ```

3. الرسم البياني:
   - يتم عرض الوظائف الأعلى استهلاكًا على شكل شريط تفاعلي داخل التطبيق

4. التنبيهات:
   - إذا تجاوزت الوظيفة حدًا معينًا من الوقت/الذاكرة → يتم عرض إشعار للمطور

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم توليد الخطة 18 بنجاح.