الخطة 63: نظام تذاكر المهام والعيوب داخل المشروع (Internal Issue & Task Ticketing System)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
دمج نظام متكامل لإدارة المهام والتذاكر داخل التطبيق، يساعد المستخدم على تنظيم العيوب والميزات والطلبات، بطريقة شبيهة بـ GitHub Issues أو Jira ولكن من داخل بيئة التطبيق مباشرة.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. إنشاء تذكرة مرتبطة بملف أو دالة أو مهمة عامة.
2. تصنيفات متنوعة (Bug – Feature – Refactor – Note).
3. حالة التذكرة (Open – In Progress – Closed).
4. دعم الإسناد لأشخاص في الفريق.
5. إضافة ملفات مرفقة وصور توضيحية.
6. شريط جانبي أو لوحة عرض مثل Kanban.
7. دعم تصدير واستيراد التذاكر.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. إنشاء التذكرة:
   - زر [➕ تذكرة] أعلى المحرر أو عند الكود.
   - تظهر نافذة إدخال:
     - العنوان
     - الوصف الكامل
     - النوع (عطل – طلب تطوير – ملاحظة)
     - الحالة الأولية
     - الملفات المرتبطة (اختياري)

2. البنية التخزينية:
   ```json
   {
     "id": 101,
     "title": "إصلاح خطأ في الدالة calculate()",
     "type": "bug",
     "status": "open",
     "assigned_to": "samir",
     "related_file": "utils.py",
     "line": 58,
     "created": "2025-07-19"
   }
   ```

3. العرض والتفاعل:
   - في قائمة جانبية تظهر:
     - [🟥] العطل رقم 101 – مفتوح
     - [🟨] ميزة جديدة – تحت التنفيذ
     - [🟩] تم الإصلاح

4. التكامل مع الملاحظات:
   - يمكن تحويل ملاحظة إلى تذكرة مهمة بنقرة واحدة.

5. التنقل والتنفيذ:
   - عند الضغط على تذكرة → ينتقل إلى السطر المرتبط تلقائيًا
   - يمكن إضافة تعليق – أو تغيير الحالة – أو إسنادها

6. التصدير:
   - إلى JSON / CSV / Markdown
   - استيراد من GitHub Issues بصيغة موحدة

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم استكمال خطة 63 وسأتابع فورًا إلى خطة 64.