الخطة 161: بيئة تنفيذ أكواد تفاعلية متعددة اللغات داخل التطبيق (Multi-Language Code Runner)

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ الهدف:
دمج وحدة تنفيذ أكواد فورية داخل التطبيق تدعم عدة لغات برمجية (Python, JavaScript, PHP...) لتوفير بيئة اختبار مباشرة دون الحاجة لتثبيت برامج خارجية.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ المكونات الأساسية:
1. محرر أكواد مدمج متعدد اللغات مع إبراز الصيغة (Syntax Highlighting).
2. وحدة تنفيذ (Interpreter) لكل لغة ضمن حاوية أو سيرفر خلفي.
3. واجهة عرض النتائج الفورية (Console).
4. دعم إدخال المستخدم (stdin) وتشغيل الأكواد تفاعليًا.
5. حفظ الأكواد التي تم تنفيذها سابقًا وسجل التشغيل.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ التفاصيل البرمجية الدقيقة:

1. محرر الأكواد:
   - استخدام مكتبة `Monaco Editor` أو `CodeMirror` مع دعم تعدد اللغات.
   - إمكانية اختيار اللغة من قائمة منسدلة: Python, JS, PHP, Bash...

2. مشغّل الأكواد الخلفي:
   - تنفيذ Python باستخدام `exec()` أو بيئة مخصصة داخل Docker.
   - JavaScript عبر `Node.js subprocess`.
   - PHP باستخدام سيرفر PHP مدمج أو API.

3. التعامل مع الإدخال والإخراج:
   - حقل لإدخال stdin أسفل المحرر.
   - عرض stdout و stderr بشكل منفصل.
   - أزرار: [تشغيل], [إيقاف], [تنظيف المخرجات].

4. حماية البيئة:
   - عزل الأكواد ضمن Sandbox أو Container لمنع تنفيذ أوامر ضارة.
   - تحديد وقت التنفيذ الأقصى (Timeout).

5. سجل الأكواد:
   - حفظ آخر 10 أكواد تم تنفيذها لكل لغة.
   - إمكانية الرجوع لأي كود سابق وتنفيذه مجددًا.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ حالات الاستخدام:

- اختبار سريع لأي كود أثناء التعلم أو التطوير.
- مقارنة نتائج كود بين أكثر من لغة.
- توضيح المفاهيم التعليمية للطلاب بشكل فوري.

━━━━━━━━━━━━━━━━━━━━━━━━━━━
تم توليد الخطة 161 بنجاح.
